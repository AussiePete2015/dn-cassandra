#!/usr/bin/env ansible-playbook
#
# (c) 2017 DataNexus Inc.  All Rights Reserved
---
# If we're using dynamic provisioning, then create the `cassandra` and
# `cassandra_seed` host groups
- name: Create cassandra and cassandra_seed host groups
  hosts: localhost
  tasks:
    # if we're using dynamic provisioning; build the host groups from the
    # meta-data associated with the matching nodes in the selected cloud
    - block:
      # load the 'local variables file', if one was defined, to get any variables
      # we might need from that file when constructing our host groups
      - name: Load local variables file
        include_vars:
          file: "{{local_vars_file}}"
        when: not (local_vars_file is undefined or local_vars_file is none or local_vars_file | trim == '')
      # then, build the seed and non-seed host groups
      - include_role:
          name: build-app-host-groups
        vars:
          host_group_list:
            - { name: cassandra, role: seed }
            - { name: cassandra }
      when: cloud is defined and (cloud == 'aws' or cloud == 'osp')

# If we're adding nodes to an existing cluster, then step through that process;
# first gather the facts for the seed nodes
- name: Gather facts from seed nodes
  hosts: cassandra_seed
  vars:
    - add_nodes: false
  tasks: []

# Then, deploy Cassandra to the new target nodes (those that don't have a
# cassandra service configured on them already) and configure those nodes to
# join the existing cluster  
- name: Install/configure servers (non-seed nodes)
  hosts: cassandra
  gather_facts: no
  vars_files:
    - vars/cassandra.yml
  vars:
    - add_nodes: false
    - combined_package_list: "{{ (default_packages|default([])) | union(cassandra_package_list) | union((install_packages_by_tag|default({})).cassandra|default([])) }}"
  tasks:
    # first check each node and see which already have a Cassandra service
    # deployed on them
    - name: Check for existence of a cassandra service on each node
      command: "systemctl status cassandra"
      args:
        warn: no
      register: casssandra_status_out
      failed_when:
        - casssandra_status_out.rc != 0
        - ("could not be found" not in casssandra_status_out.stderr)
    # then, provision Cassandra to any nodes where the Cassandra service could
    # not be found
    - include: common-flows/provision-nodes.yml static=no
      when: ("could not be found" in casssandra_status_out.stderr)
